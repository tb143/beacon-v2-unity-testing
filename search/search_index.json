{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Beacon v2 Documentation \u00b6 Under Development Note that Beacon v2 is still under development and needs to be approved by the GA4GH . The core documentation (i.e. this document) can be found on here . Scope and Purpose \u00b6 With growing interest from the community in the implementation of the Beacon protocol into resources and workflows, the major 2.0 release scheduled for Spring 2022 will introduce new features which were considered important by the community such as: extended and clearer specified genomic variation queries, including wildcard and region queries (i.e. returning variants within a genomic/chromosomal region) get a list of samples related to a phenotype, provided the required authentication or authorization powerful filters , primarily based on CURIE terms for ontologies and references, including options to control the use of hierarchical terms or the precision of term matching scoped data delivery (e.g. matched variant details or sample information) as part of Beacon responses or through handover protocols","title":"Introduction to Beacon v2"},{"location":"#scope-and-purpose","text":"With growing interest from the community in the implementation of the Beacon protocol into resources and workflows, the major 2.0 release scheduled for Spring 2022 will introduce new features which were considered important by the community such as: extended and clearer specified genomic variation queries, including wildcard and region queries (i.e. returning variants within a genomic/chromosomal region) get a list of samples related to a phenotype, provided the required authentication or authorization powerful filters , primarily based on CURIE terms for ontologies and references, including options to control the use of hierarchical terms or the precision of term matching scoped data delivery (e.g. matched variant details or sample information) as part of Beacon responses or through handover protocols","title":"Scope and Purpose"},{"location":"_notes-for-roles/","text":"User \u00b6 Those leveraging the Beacon instances data. What an User is interested about? \u00b6 Which is the purpose Which domain is covered What is available Datasets & Entry types Beacon instances How to query API / User Interface Filters Granularity How to use alternative schemas Potential Documents \u00b6 Beacon v2 Model domain Knowing what is available in an instance Entry Types Datasets & Cohorts Granularity & security Protocol/Query basics Requests, responses & errors OpenAPI Using Beacon v2 Features Filters Alternative schemas Deployer \u00b6 Those deploying a new Beacon instance. What a Deployer is interested about? \u00b6 Which resources are needed Where is the software Which are the components How to install How to configure How to admin Testing the instance Potential Documents \u00b6 Beacon v2 Model domain Reference Implementation Hardware & software requirements Components How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance Implementer \u00b6 Topics of Interest \u00b6 Beacon \"flavours\" Granularity & security Protocol details and flow Error handling Features to implement Verifying compliance Versioning Potential Documents \u00b6 Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Configuration Granularity & security Verifying compliance Stakeholder \u00b6 Partners that have some relationship or investment in Beacon (e.g. GA4GH, ELIXIR...). What a Stakeholder is interested about? \u00b6 What is a Beacon Purpose Which domain is covered Differences with v1 Features From stakeholder perspective GA4GH (as a whole & WS) ELIXIR (Hub & B1MG) IMPaCT Verifying compliance Success Stories Potential Documents \u00b6 Beacon v2 Model domain Entry Types Datasets & Cohorts Filters Framework Features Granularity & security Protocol/Query basics Filters Alternative schemas Integration into GA4GH Leveraging Fwk in other domains Success Stories: Implementations Real world data","title":"User"},{"location":"_notes-for-roles/#what-an-user-is-interested-about","text":"Which is the purpose Which domain is covered What is available Datasets & Entry types Beacon instances How to query API / User Interface Filters Granularity How to use alternative schemas","title":"What an User is interested about?"},{"location":"_notes-for-roles/#potential-documents","text":"Beacon v2 Model domain Knowing what is available in an instance Entry Types Datasets & Cohorts Granularity & security Protocol/Query basics Requests, responses & errors OpenAPI Using Beacon v2 Features Filters Alternative schemas","title":"Potential Documents"},{"location":"_notes-for-roles/#what-a-deployer-is-interested-about","text":"Which resources are needed Where is the software Which are the components How to install How to configure How to admin Testing the instance","title":"What a Deployer is interested about?"},{"location":"_notes-for-roles/#potential-documents_1","text":"Beacon v2 Model domain Reference Implementation Hardware & software requirements Components How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance","title":"Potential Documents"},{"location":"_notes-for-roles/#topics-of-interest","text":"Beacon \"flavours\" Granularity & security Protocol details and flow Error handling Features to implement Verifying compliance Versioning","title":"Topics of Interest"},{"location":"_notes-for-roles/#potential-documents_2","text":"Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Configuration Granularity & security Verifying compliance","title":"Potential Documents"},{"location":"_notes-for-roles/#what-a-stakeholder-is-interested-about","text":"What is a Beacon Purpose Which domain is covered Differences with v1 Features From stakeholder perspective GA4GH (as a whole & WS) ELIXIR (Hub & B1MG) IMPaCT Verifying compliance Success Stories","title":"What a Stakeholder is interested about?"},{"location":"_notes-for-roles/#potential-documents_3","text":"Beacon v2 Model domain Entry Types Datasets & Cohorts Filters Framework Features Granularity & security Protocol/Query basics Filters Alternative schemas Integration into GA4GH Leveraging Fwk in other domains Success Stories: Implementations Real world data","title":"Potential Documents"},{"location":"beacon-flavours/","text":"Beacon \"Flavours\" \u00b6 While the original Beacon v1 only provided Boolean ( i.e. YES/NO ) responses on queries for the existence of specific genomic variants, Beacon v2 is a flexible protocol that supports differentg usage scenarios - also called \"flavours\", since they are more a representation of usage types w/o prescribing their specific details. Importantly, the Beacon framework separates query options from the response side. In that way a privacy-protecting 1 Boolean Beacon still may offer more query features - and therefore better usability - compared to the first Beacon concept implementations For detailed information about the technical implementation of the different logical scopes please see the Framework documentation. Boolean Response Beacon \u00b6 A Boolean Beacon is in it's response similar to Beacon v1 - i.e. responding with a true or false value when queried for the existence of some data in a resource. However, in contrast to earlier versions, in Beacon v1 in principle a \"Boolean Beacon\" may implement all types of query options (e.g. combinations of various filters and genomic query parameters) but still offer a Boolean response, either as sole option or depending on the user's authentication status. Boolean Response \u00b6 Beacon Count Response \u00b6 Beacons Supporting Data and Information Delivery \u00b6 Beacon Data Model \u00b6 Alternative Data Models \u00b6 Data Handover \u00b6 Privacy protecting as in \"reasonably protecting by design but not immune to complex re-identification attacks\". \u21a9","title":"Beacon Flavours"},{"location":"beacon-flavours/#boolean-response-beacon","text":"A Boolean Beacon is in it's response similar to Beacon v1 - i.e. responding with a true or false value when queried for the existence of some data in a resource. However, in contrast to earlier versions, in Beacon v1 in principle a \"Boolean Beacon\" may implement all types of query options (e.g. combinations of various filters and genomic query parameters) but still offer a Boolean response, either as sole option or depending on the user's authentication status.","title":"Boolean Response Beacon"},{"location":"beacon-flavours/#boolean-response","text":"","title":"Boolean Response"},{"location":"beacon-flavours/#beacon-count-response","text":"","title":"Beacon Count Response"},{"location":"beacon-flavours/#beacons-supporting-data-and-information-delivery","text":"","title":"Beacons Supporting Data and Information Delivery"},{"location":"beacon-flavours/#beacon-data-model","text":"","title":"Beacon Data Model"},{"location":"beacon-flavours/#alternative-data-models","text":"","title":"Alternative Data Models"},{"location":"beacon-flavours/#data-handover","text":"Privacy protecting as in \"reasonably protecting by design but not immune to complex re-identification attacks\". \u21a9","title":"Data Handover"},{"location":"bugs-changes-log/","text":"TODO, Bugs & Changes \u00b6 TODO \u00b6 Documentation \u00b6 content for Standards Integration (as noted on page) re-structuring of Framework page re-structuring of Models page integration with the Schemas pages removal of the individual schemas from the main navigation delete documentation in framework and model repo READMEs and point here fix https (probably @mbaudis has to do some registrar configuration...) content for the Filters page merging (?) of the Introduction and Documentation Scopes pages clarification, re-structuring, links ... add more Implementations extend Query documentation , also using content from the variant scouts document Repositories \u00b6 name and title change adjusting all the links accordingly BUG: fix transfer of examples retiring of framework and model repos Changes \u00b6 2002-03-18: Macros and Variables for Documentation pages \u00b6 The mkdocs-macros-plugin has been activated, allowing the use of site-wide variables: repo_model_url: https://github.com/ga4gh-beacon/beacon-v2-unity-testing/tree/main/models/src this can be used inline as https://github.com/ga4gh-beacon/beacon-v2-unity-testing/tree/main/models/src 2002-03-16: Documentation Content and Formats Updates \u00b6 addition of more variant query examples new landing pages for Implementations and Networks and Standards Integration many adjustments to documentation structure, appearance and representation (e.g. content tabs for query examples) 2002-03-14: Documentation in Repository \u00b6 As of today the new/emerging Beacon v2 documentation is meintained in this repository. We're testing rendered versions (same text/code base) through Github actions ( here ) and ReadTheDocs . testing of ReadTheDocs version vs. a material themed build created and linked docs.genomebeacons.org sub-domain to the Github hosted version of the rendered documentation merging of previous separate documentation repository content from beacon-v2-schema-documentation in the \"unity\" repository and archiving of the old one 2022-03-11: Removing yaml export version \u00b6 Since moving to having the source in YAML the existence of a separate yaml export seems unnecessary & maybe confusing. Removed. 2022-03-09: Nesting models \u00b6 The structure of the models directory has now be changed to have the default model as one of possibly multiple options as per the discussions in #1 . The current structure (below) might not be final (e.g. placing of the beaconConfiguration.yaml , beaconMap.yaml , endpoints.yaml files?). beacon | |-- framework ... |-- models | |-- src | | |-- beacon-v2-default-model | | |-- analyses ... | | |-- biosamples ... | | |-- genomicVariations ... | | |-- ... | | |-- endpoints.yaml | | | |-- json | |-- beacon-v2-default-model | |-- analyses ... | |-- biosamples ... | |-- genomicVariations ... | |-- ... | |-- endpoints.yaml | |-- bin ... |-- docs ... ... 2022-03-08: Automated pulling from current origin repos \u00b6 added simple pull commands to the conversion for automatic update to the donor repos git -C $BEACONMODELPATH pull git -C $BEACONFRAMEWORKPATH pull updated to current crop of PRs 2022-02-24: Path fixes \u00b6 changed the path replacements to the current repo, resulting in e.g. raw.githubusercontent.com/ga4gh-beacon/beacon-v2-unity-testing/main/framework/json/responses/sections/beaconInformationalResponseMeta.json 2022-02-23: Re-tool \u00b6 replacement of the previopus general yamler.py with a dedicated beaconYamler.py moving replacements to bin/config.yaml requirement for complete arguments (in and out paths, in- and out formats) - see bin/yamlerRunner.sh 2022-02-22: Creation of repository \u00b6 design of directory structure test tooling & population with auto-converted files","title":"Changes"},{"location":"bugs-changes-log/#todo","text":"","title":"TODO"},{"location":"bugs-changes-log/#documentation","text":"content for Standards Integration (as noted on page) re-structuring of Framework page re-structuring of Models page integration with the Schemas pages removal of the individual schemas from the main navigation delete documentation in framework and model repo READMEs and point here fix https (probably @mbaudis has to do some registrar configuration...) content for the Filters page merging (?) of the Introduction and Documentation Scopes pages clarification, re-structuring, links ... add more Implementations extend Query documentation , also using content from the variant scouts document","title":"Documentation"},{"location":"bugs-changes-log/#repositories","text":"name and title change adjusting all the links accordingly BUG: fix transfer of examples retiring of framework and model repos","title":"Repositories"},{"location":"bugs-changes-log/#changes","text":"","title":"Changes"},{"location":"filters/","text":"Filters \u00b6 Filters represent a powerful addition to the Beacon query API. Briefly, they empower such options as queries for phenotypes, disease codes or technical parameters associated with observed genomic variants. (TBD)","title":"Filters"},{"location":"formats-standards/","text":"Formats, Standards and Integrations \u00b6 Data Formats and Standards \u00b6 Schema Language and Conventions \u00b6 JSON Schema, YAML/JSON, camelCasing and others ... Genome Coordinates \u00b6 0-based interbase etc., see schemablocks.org Dates and Times \u00b6 ISO8601 etc., see schemablocks.org Integration with External Standards \u00b6 The development of the Beacon v2 framework and default model closely follows and widely adopts concepts and schemas from approved GA4GH products such as Phenopackets and the Variant Representation Standard (VRS). (TBD)","title":"Standards Integration"},{"location":"formats-standards/#data-formats-and-standards","text":"","title":"Data Formats and Standards"},{"location":"formats-standards/#schema-language-and-conventions","text":"JSON Schema, YAML/JSON, camelCasing and others ...","title":"Schema Language and Conventions"},{"location":"formats-standards/#genome-coordinates","text":"0-based interbase etc., see schemablocks.org","title":"Genome Coordinates"},{"location":"formats-standards/#dates-and-times","text":"ISO8601 etc., see schemablocks.org","title":"Dates and Times"},{"location":"formats-standards/#integration-with-external-standards","text":"The development of the Beacon v2 framework and default model closely follows and widely adopts concepts and schemas from approved GA4GH products such as Phenopackets and the Variant Representation Standard (VRS). (TBD)","title":"Integration with External Standards"},{"location":"framework/","text":"Beacon v2 Framework \u00b6 Introduction \u00b6 The GA4GH Beacon specification is composed by two parts: the Beacon Framework (in this repo) the Beacon Model (in the Models repo ) The Beacon Framework is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . A Beacon Model describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample . It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Models repo for further information about the Model and how to use it. The Framework doesn't include anything related to specific entities but only the mechanisms for querying them and parsing the responses. The BF is, therefore, independent from/agnostic to any specific Model. It can be leveraged to describe models from other domains like proteomics, imaging, biobanking, etc. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone this (Framework) repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific instance. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas in the Framework to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Beacon verifier tool would help in such validation. The Framework repo includes the elements that are common to all Beacons: The configuration files The Json schemas for the requests, the responses, and its respective sections The files of every Beacon root Examples of all the above (using a fake and simple Model) Coding and nanimg conventions \u00b6 For historical reasons, in the names of entities, parameters and URLs we are following the conventions: * Entity names: PascalCase * parameters: camelCase * URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention. Folder structure in the framework repo \u00b6 The above listed elements are organized in several folders ( in alphabetical order ): common: Json schemas and examples of the components used in other parts of the specification. configuration: Json schemas and examples for the configuration files that every Beacon MUST implement. requests: Json schemas and examples for the different sections of a request. responses: Json schemas and examples for the different types of responses and response sections. root folder: It only includes the definition of the Beacon root endpoints. The root folder and the Beacon root endpoints \u00b6 The root folder only contains the endpoints.json document, an OpenAPI 3.0.2 description of the endpoints that every Beacon instance MUST implement. The endpoints are: * the root ( / ) and /info that MUST return information (metadata) about the Beacon service and the organization supporting it. * the /service-info endpoint that returns the Beacon metadata in the GA4GH Service Info schema. * the /configuration endpoint that returns some configuration aspects and the definition of the entry types (e.g. genomic variants , biosamples , cohorts ) implemented in that specific Beacon server or instance. * the /entry_types endpoints that only return the section of the configuration that describes the entry types in that Beacon. * the /map endpoint that returns a map (like a web sitemap ) of the different endpoints implemented in that Beacon instance. * the /filtering_terms endpoint that returns a list of the filtering terms accepted by that Beacon instance. Most of these endpoints simply return the configuration files that are in the Beacon configuration folder. Of course, every Beacon instance would have their particular instance of such documents, including the configuration of such instance. Note: It could be argued that the Beacon configuration files are different for every Beacon instance and, hence, they should be part of the Model. However, the configuration files MUST be used, exactly with the same schema, by any model, independently if that Beacon follows the Beacon v2 Model or any other. Additionally, these endpoints and configuration files are critical for a Beacon client to be able to understand and use a Beacon instance. Therefore, we have considered it to be an essential part of the Framework and belonging to it. The Configuration \u00b6 Contains the Json schema files that describe the Beacon configuration, its contents are described in the section above, as they have almost a 1-to-1 relationship with such endpoints. Further details about the specific content of each file could be find in the corresponding sections below. The Requests \u00b6 Contains the following Json schemas: beaconRequestBody.json: Schema for the whole Beacon request. It is named RequestBody to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload. beaconRequestMeta.json: Meta section of the Beacon request. It includes request context details relevant for the Beacon server when processing the request, like the Beacon API version used to format the request or the schemas expected for the entry types in the response. filteringTerms.json: defines the schema for the filters included in the request. requestParameters.json defines the, very free, schema of the parameters included in the request. examples-fullDocuments folder: includes examples of \"actual\" requests. The example labelled with MIN in the name shows the minimal required attributes for the request to be compliant. The example labelled with MAX in the name includes a richer case with all the sections filled in. examples-sections folder: includes examples of \"actual\" sections of the requests. It is included to allow specification designers and Beacon implementers to check the compliance with a single section instead of having to implement a whole request. Such way, We aim to facilitate an \"incremental\" implementation of an instance. Differences between FilteringTerms and RequestParameters \u00b6 Both, the filters ( filteringTerms ) and the parameters ( requestParameters ), are used to refine the query. The availability of two mechanisms to refine the queries could sound initially confusing, but that separation is taylored to facilitate the interpretation of the request by the Beacon server. An basic difference is that, in HTTP GET requests, each parameters is named (e.g. 'id', 'skip','limit') while filters go under the same named parameter 'filters'. For HTTP POST requests, the difference relays on paramaters having each one a separate definition (e.g. id is a string , while skip is an integer ), while all filters follow the schema described in /requests/filteringTerms.json . An unrestricted query like /datasets should return the list of all datasets in a Beacon instance. That query could be refined by adding a generic condition like: \"return only datasets which could be used for 'general research'\" or \"return only the first 10 datasets\". The former belong to the filter category, the latter to the parameters. If you are a beacon implementer, a rule of thumb could be: anything that requires its own schema would be a request parameter anything that could be represented by an ontology term would go into the filters section. anything else would probably be a request parameter. The Responses \u00b6 The Beacon concept includes several types of responses: some informative or informational and some with actual data payloads, and the error one. The Informational responses \u00b6 A Beacon is able to return information, details, about itself. Many of the schema responses included in the responses folder have a 1-to-1 relationship with the corresponding configuration documents and their equivalent root endpoints, e.g. the beaconEntryTypeResponse.json is the schema of a response that wraps the beaconConfiguration.json document, and is then used as the payload of the /entry_types root endpoint. Schematically: * configuration/an_schema.json : describes the schema of the configuration file itself. * responses/an_schema_response.json : describes the format of the response that returns these configuration information. * root/endpoints.json : describes the API endpoints to be called and parameters to be used to retrieve such responses. The following schemas refer to informational responses: beaconConfigurationResponse , beaconEntryTypeResponse , beaconFilteringTermsResponse , \u00e2nd beaconMapResponse . The results responses \u00b6 A Beacon could return responses at different granularity levels: boolean response: only returns exists: true ('Yes') or exists: false ('No') to a given query. count response: returns Yes / No and the number of matching results. resultset response: returns Yes / No , the number of matching results and details of them per every collection (e.g. every dataset or cohort) and, if granted, details on every record that matches the query. Each of these granularity levels has an equivalent response schema: boolean : beaconBooleanResponse count : beaconCountResponse resultset (with or w/o record details): beaconResultSetsResponse An additional schema, beaconCollectionsResponse , describes such responses that returns details about the collections in a Beacon, but not the collection content themselves. Otherwise said, the response describes a dataset, but not returns the contents of any dataset. The common components \u00b6 Some elements are transerval to the Framework and to any model, e.g. the schema for describing an ontology term or the reference to an external schema (like the reference to GA4GH Phenopackets or GA4GH Service Info schemas). Testing the compliance of an implementation with testMode \u00b6 Given that the flexibility allowed in the implentation of each Beacon instance, and the security restrictions that could apply (e.g. only answering after authentication of the user), a mechanism is required for allowing testing the compliance of a Beacon. A first step in this compliance testing is done by the implementer by checking that received requests are correct and that the generated responses match the provided schemas. However, an external compliance testing is desirable when the Beacon instance plans to be integrated in a network or to engage in dialogs with a diversity of clients. For this second scenario, the testMode parameter was included. A Beacon instance could receive a request with the testMode parameter activated (value= true ) in which case the Beacon MUST respond, with actual or fake contents, using the response format and skipping any user authentication. The fact that a response has been generated for testing purposes is included in the meta section of the response. The Beacon Configuration file \u00b6 The file /configuration/beaconConfiguration.json defines the schema (in Json schema draft-07) of the Json file that includes core aspects of a Beacon instance configuration. The schema includes four sections: $schema: that MUST BE a reference to a schema. In the Models, the instances of that file will point to this file . Having the schema allows verifying that the document is compliant with it. maturityAttributes: Declares the level of maturity of the Beacon instance. Available values are: DEV: Service potentially unstable, not using real data, which availability and data should not be used in production setups. TEST: The service is expected to be stable, meaning up and available, but does not include real data to be trusted for real world queries. PROD: Service stable, at production level standards, containing actual data. Except when testing, most of the Beacon queries are expected to be answered by 'PROD' Beacons. securityAttributes: Configuration of the security aspects of the Beacon. By default, a Beacon that does not declare the configuration settings would return boolean (true/false) responses, and only if the user is authenticated and explicitly authorized to access the Beacon resources. Although this is the safest set of settings, it is not recommended unless the Beacon shares very sensitive information. Non sensitive Beacons should preferably opt for a record and PUBLIC combination. defaultGranularity: Default granularity of the responses. Some responses could return higher detail, but this would be the granularity by default. securityLevels: All access levels supported by the Beacon. Any combination is valid, as every option would apply to different parts of the Beacon. Available options are: Granularity Description boolean returns 'true/false' responses. count adds the total number of positive results found. aggregated returns summary, aggregated or distribution like responses per collection. record returns details for every row. For those cases where a Beacon prefers to return records with less, not all, attributes, different strategies have been considered, e.g.: keep non-mandatory attributes empty, or Beacon to provide a minimal record definition, but these strategies still need to be tested in real world cases and hence no design decision has been taken yet. security level description PUBLIC Any anonymous user can read the data REGISTERED Only known users can read the data CONTROLLED Only specificly granted users can read the data Example \u00b6 \"maturityAttributes\" : { \"productionStatus\" : \"DEV\" }, \"securityAttributes\" : { \"defaultGranularity\" : \"boolean\" , \"securityLevels\" : [ \"PUBLIC\" , \"REGISTERED\" , \"CONTROLLED\" ] } The Beacon in the example is in development status, returns boolean answers by default, and has queries available in any of the access levels.","title":"Framework"},{"location":"framework/#introduction","text":"The GA4GH Beacon specification is composed by two parts: the Beacon Framework (in this repo) the Beacon Model (in the Models repo ) The Beacon Framework is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . A Beacon Model describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample . It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Models repo for further information about the Model and how to use it. The Framework doesn't include anything related to specific entities but only the mechanisms for querying them and parsing the responses. The BF is, therefore, independent from/agnostic to any specific Model. It can be leveraged to describe models from other domains like proteomics, imaging, biobanking, etc. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone this (Framework) repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific instance. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas in the Framework to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Beacon verifier tool would help in such validation. The Framework repo includes the elements that are common to all Beacons: The configuration files The Json schemas for the requests, the responses, and its respective sections The files of every Beacon root Examples of all the above (using a fake and simple Model)","title":"Introduction"},{"location":"framework/#coding-and-nanimg-conventions","text":"For historical reasons, in the names of entities, parameters and URLs we are following the conventions: * Entity names: PascalCase * parameters: camelCase * URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention.","title":"Coding and nanimg conventions"},{"location":"framework/#folder-structure-in-the-framework-repo","text":"The above listed elements are organized in several folders ( in alphabetical order ): common: Json schemas and examples of the components used in other parts of the specification. configuration: Json schemas and examples for the configuration files that every Beacon MUST implement. requests: Json schemas and examples for the different sections of a request. responses: Json schemas and examples for the different types of responses and response sections. root folder: It only includes the definition of the Beacon root endpoints.","title":"Folder structure in the framework repo"},{"location":"framework/#the-root-folder-and-the-beacon-root-endpoints","text":"The root folder only contains the endpoints.json document, an OpenAPI 3.0.2 description of the endpoints that every Beacon instance MUST implement. The endpoints are: * the root ( / ) and /info that MUST return information (metadata) about the Beacon service and the organization supporting it. * the /service-info endpoint that returns the Beacon metadata in the GA4GH Service Info schema. * the /configuration endpoint that returns some configuration aspects and the definition of the entry types (e.g. genomic variants , biosamples , cohorts ) implemented in that specific Beacon server or instance. * the /entry_types endpoints that only return the section of the configuration that describes the entry types in that Beacon. * the /map endpoint that returns a map (like a web sitemap ) of the different endpoints implemented in that Beacon instance. * the /filtering_terms endpoint that returns a list of the filtering terms accepted by that Beacon instance. Most of these endpoints simply return the configuration files that are in the Beacon configuration folder. Of course, every Beacon instance would have their particular instance of such documents, including the configuration of such instance. Note: It could be argued that the Beacon configuration files are different for every Beacon instance and, hence, they should be part of the Model. However, the configuration files MUST be used, exactly with the same schema, by any model, independently if that Beacon follows the Beacon v2 Model or any other. Additionally, these endpoints and configuration files are critical for a Beacon client to be able to understand and use a Beacon instance. Therefore, we have considered it to be an essential part of the Framework and belonging to it.","title":"The root folder and the Beacon root endpoints"},{"location":"framework/#the-configuration","text":"Contains the Json schema files that describe the Beacon configuration, its contents are described in the section above, as they have almost a 1-to-1 relationship with such endpoints. Further details about the specific content of each file could be find in the corresponding sections below.","title":"The Configuration"},{"location":"framework/#the-requests","text":"Contains the following Json schemas: beaconRequestBody.json: Schema for the whole Beacon request. It is named RequestBody to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload. beaconRequestMeta.json: Meta section of the Beacon request. It includes request context details relevant for the Beacon server when processing the request, like the Beacon API version used to format the request or the schemas expected for the entry types in the response. filteringTerms.json: defines the schema for the filters included in the request. requestParameters.json defines the, very free, schema of the parameters included in the request. examples-fullDocuments folder: includes examples of \"actual\" requests. The example labelled with MIN in the name shows the minimal required attributes for the request to be compliant. The example labelled with MAX in the name includes a richer case with all the sections filled in. examples-sections folder: includes examples of \"actual\" sections of the requests. It is included to allow specification designers and Beacon implementers to check the compliance with a single section instead of having to implement a whole request. Such way, We aim to facilitate an \"incremental\" implementation of an instance.","title":"The Requests"},{"location":"framework/#the-responses","text":"The Beacon concept includes several types of responses: some informative or informational and some with actual data payloads, and the error one.","title":"The Responses"},{"location":"framework/#the-common-components","text":"Some elements are transerval to the Framework and to any model, e.g. the schema for describing an ontology term or the reference to an external schema (like the reference to GA4GH Phenopackets or GA4GH Service Info schemas).","title":"The common components"},{"location":"framework/#testing-the-compliance-of-an-implementation-with-testmode","text":"Given that the flexibility allowed in the implentation of each Beacon instance, and the security restrictions that could apply (e.g. only answering after authentication of the user), a mechanism is required for allowing testing the compliance of a Beacon. A first step in this compliance testing is done by the implementer by checking that received requests are correct and that the generated responses match the provided schemas. However, an external compliance testing is desirable when the Beacon instance plans to be integrated in a network or to engage in dialogs with a diversity of clients. For this second scenario, the testMode parameter was included. A Beacon instance could receive a request with the testMode parameter activated (value= true ) in which case the Beacon MUST respond, with actual or fake contents, using the response format and skipping any user authentication. The fact that a response has been generated for testing purposes is included in the meta section of the response.","title":"Testing the compliance of an implementation with testMode"},{"location":"framework/#the-beacon-configuration-file","text":"The file /configuration/beaconConfiguration.json defines the schema (in Json schema draft-07) of the Json file that includes core aspects of a Beacon instance configuration. The schema includes four sections: $schema: that MUST BE a reference to a schema. In the Models, the instances of that file will point to this file . Having the schema allows verifying that the document is compliant with it. maturityAttributes: Declares the level of maturity of the Beacon instance. Available values are: DEV: Service potentially unstable, not using real data, which availability and data should not be used in production setups. TEST: The service is expected to be stable, meaning up and available, but does not include real data to be trusted for real world queries. PROD: Service stable, at production level standards, containing actual data. Except when testing, most of the Beacon queries are expected to be answered by 'PROD' Beacons. securityAttributes: Configuration of the security aspects of the Beacon. By default, a Beacon that does not declare the configuration settings would return boolean (true/false) responses, and only if the user is authenticated and explicitly authorized to access the Beacon resources. Although this is the safest set of settings, it is not recommended unless the Beacon shares very sensitive information. Non sensitive Beacons should preferably opt for a record and PUBLIC combination. defaultGranularity: Default granularity of the responses. Some responses could return higher detail, but this would be the granularity by default. securityLevels: All access levels supported by the Beacon. Any combination is valid, as every option would apply to different parts of the Beacon. Available options are: Granularity Description boolean returns 'true/false' responses. count adds the total number of positive results found. aggregated returns summary, aggregated or distribution like responses per collection. record returns details for every row. For those cases where a Beacon prefers to return records with less, not all, attributes, different strategies have been considered, e.g.: keep non-mandatory attributes empty, or Beacon to provide a minimal record definition, but these strategies still need to be tested in real world cases and hence no design decision has been taken yet. security level description PUBLIC Any anonymous user can read the data REGISTERED Only known users can read the data CONTROLLED Only specificly granted users can read the data","title":"The Beacon Configuration file"},{"location":"implement-and-deploy/","text":"Implement and Deploy a Beacon \u00b6 Owners and managers of genomic data resources may (should!) be interested in \"beaconizing\" their resources through the implementation of a Beacon API[1] for web-protocol based access to their data. Beacon software can be developed de novo , make use of code from existing solutions or can directly be derived from the Beacon reference implementation provided by the beacon development team. Topics of Interest \u00b6 Beacon \"flavours\" Error handling Features to implement Verifying compliance Versioning Granularity & security Protocol details and flow Potential Documents \u00b6 Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Genomic Queries Filters Alternative schemas Configuration Granularity & security Verifying compliance Application Programming Interface \u21a9","title":"Deployment Options"},{"location":"implement-and-deploy/#topics-of-interest","text":"Beacon \"flavours\" Error handling Features to implement Verifying compliance Versioning Granularity & security Protocol details and flow","title":"Topics of Interest"},{"location":"implement-and-deploy/#potential-documents","text":"Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Genomic Queries Filters Alternative schemas Configuration Granularity & security Verifying compliance Application Programming Interface \u21a9","title":"Potential Documents"},{"location":"implementations-and-networks/","text":"Implementations and Examples \u00b6 Registry Server \u00b6 The Beacon registry server, hosted through the European Genome-Phenome Archive, monitors a number of implementations of the Beacon v2 protocol by various organisations actively involved in Beacon protocol development. Link: Beacon v2 GA4GH Approval Registry \u00b6 Beacon Networks \u00b6 (TBD) Example Implementations \u00b6 Progenetix API \u00b6 The Progenetix database and cancer genomic information resource contains genome profiles of more than 140\u2019000 individual cancer genome screening experiments, with the majority representing results from genomic copy number assessment studies. With its Beacon + forward-looking test implementation, since 2016 Progenetix has been developing concepts for Beacon protocol extensions such as CNV query options or handover data delivery. Link: Documentation page for Progenetix REST paths \u00b6","title":"Implementations and Networks"},{"location":"implementations-and-networks/#registry-server","text":"The Beacon registry server, hosted through the European Genome-Phenome Archive, monitors a number of implementations of the Beacon v2 protocol by various organisations actively involved in Beacon protocol development.","title":"Registry Server"},{"location":"implementations-and-networks/#beacon-networks","text":"(TBD)","title":"Beacon Networks"},{"location":"implementations-and-networks/#example-implementations","text":"","title":"Example Implementations"},{"location":"implementations-and-networks/#progenetix-api","text":"The Progenetix database and cancer genomic information resource contains genome profiles of more than 140\u2019000 individual cancer genome screening experiments, with the majority representing results from genomic copy number assessment studies. With its Beacon + forward-looking test implementation, since 2016 Progenetix has been developing concepts for Beacon protocol extensions such as CNV query options or handover data delivery.","title":"Progenetix API"},{"location":"models/","text":"beacon-v2-Models \u00b6 Introduction \u00b6 The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework (in Framework repo ) is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . Beacon Models (in the Models repo ) describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample , and also the relationships between them. It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Framework repo for further information about the Framework and its parts. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone the Framework repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific case. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas there to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Framewrok is not used to check the schema in the responses payload (e.g. the actual details of a biosample of a cohort). The schemas for that are included in the Model that you should have copied. The Model repo points to several hosts the default model for Beacon v2: The TEMPLATE Model: repo is the most basic model. Its purpose is twofold 1) as starting point for any new model (so to say, not Beacon v2) and 2) as a learning tool. The Beacon v2 Model: (in Models ) represents the complete Beacon v2 Default Model. The Beacon v1 Model: repo Provided as an example for Beacon v1 implementers that want to update to Beacon v2 but not planning to add any additional entry type to their Beacon. Coding and naming conventions \u00b6 For historical reasons, in the names of entities, parameters and URLs we are following the conventions: Entity names: PascalCase parameters: camelCase URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention.","title":"Models"},{"location":"models/#introduction","text":"The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework (in Framework repo ) is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . Beacon Models (in the Models repo ) describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample , and also the relationships between them. It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Framework repo for further information about the Framework and its parts. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone the Framework repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific case. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas there to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Framewrok is not used to check the schema in the responses payload (e.g. the actual details of a biosample of a cohort). The schemas for that are included in the Model that you should have copied. The Model repo points to several hosts the default model for Beacon v2: The TEMPLATE Model: repo is the most basic model. Its purpose is twofold 1) as starting point for any new model (so to say, not Beacon v2) and 2) as a learning tool. The Beacon v2 Model: (in Models ) represents the complete Beacon v2 Default Model. The Beacon v1 Model: repo Provided as an example for Beacon v1 implementers that want to update to Beacon v2 but not planning to add any additional entry type to their Beacon.","title":"Introduction"},{"location":"models/#coding-and-naming-conventions","text":"For historical reasons, in the names of entities, parameters and URLs we are following the conventions: Entity names: PascalCase parameters: camelCase URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention.","title":"Coding and naming conventions"},{"location":"rest-api/","text":"Beacon REST API \u00b6 While the full power of the Beacon API can be unlocked through the use of structured queries using JSON serialization (\"POST\" requests), the majority of common queries can be implemented through standard query URLs with parameters (GET queries). Example Beacon API URLs \u00b6 Beacon REST paths in general follow the format __APIroot__/__entryType__/{id}/ or __APIroot__/__entryType__/{id}/__requestedSchema__ A typical example would e.g. the request to retrieve all genomic variants associated with a biosample https://example.com/beacon/api/biosamples/bios-st4582/g_variants REST Endpoint Definitions The endpoind paths available for a given Beacon instance are defined in __APIroot__/beaconMap/ Github Typical Endpoint Patterns \u00b6 (TBD)","title":"REST API"},{"location":"rest-api/#example-beacon-api-urls","text":"Beacon REST paths in general follow the format __APIroot__/__entryType__/{id}/ or __APIroot__/__entryType__/{id}/__requestedSchema__ A typical example would e.g. the request to retrieve all genomic variants associated with a biosample https://example.com/beacon/api/biosamples/bios-st4582/g_variants REST Endpoint Definitions The endpoind paths available for a given Beacon instance are defined in __APIroot__/beaconMap/ Github","title":"Example Beacon API URLs"},{"location":"rest-api/#typical-endpoint-patterns","text":"(TBD)","title":"Typical Endpoint Patterns"},{"location":"roles/","text":"Informations for Different Types of Beacon Users \u00b6 The Beacon documentation provides information for different types of stakeholders, depending on their interests and use cases. Although those will overlap, we highlight information relevant for some general scenarios throughout the documentation. Users \u00b6 A Beacon user is interested in querying Beacon instances and networks, either through web interfaces by using the Beacon API. While users of Beacon web forms in principle do not need to understand the underlying query syntax and response formats they too may benefit from some insights into the general capabilities of the underlying protocol. User Beacon v2 Model Knowing what is available in an instance Entry Types Datasets & Cohorts Granularity & security Protocol/Query basics Requests, responses & errors OpenAPI Using Beacon v2 Features Filters Alternative schemas Deployers and Implementers \u00b6 A Beacon Deployer is someone who wants to make their genomics resource accessible through the Beacon protocol, without necessarily being interested or experienced in the computational aspects; while a Beacon Implementer provides the technical expertise (and potentially may get involved with Beacon development itself, e.g. to extend the protocol for novel use cases). Deployer Beacon v2 Models Reference Implementation Infrastructure requirements How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance Implementer \u00b6 Implementer Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Configuration Granularity & security Verifying compliance Stakeholder \u00b6 Stakeholder Integration into GA4GH Leveraging The Beacon Framework in other domains Success Stories: Implementations Real world data","title":"Documentation Scopes"},{"location":"roles/#users","text":"A Beacon user is interested in querying Beacon instances and networks, either through web interfaces by using the Beacon API. While users of Beacon web forms in principle do not need to understand the underlying query syntax and response formats they too may benefit from some insights into the general capabilities of the underlying protocol. User Beacon v2 Model Knowing what is available in an instance Entry Types Datasets & Cohorts Granularity & security Protocol/Query basics Requests, responses & errors OpenAPI Using Beacon v2 Features Filters Alternative schemas","title":"Users"},{"location":"roles/#deployers-and-implementers","text":"A Beacon Deployer is someone who wants to make their genomics resource accessible through the Beacon protocol, without necessarily being interested or experienced in the computational aspects; while a Beacon Implementer provides the technical expertise (and potentially may get involved with Beacon development itself, e.g. to extend the protocol for novel use cases). Deployer Beacon v2 Models Reference Implementation Infrastructure requirements How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance","title":"Deployers and Implementers"},{"location":"roles/#implementer","text":"Implementer Beacon v2 Models Protocol basics Requests, responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Configuration Granularity & security Verifying compliance","title":"Implementer"},{"location":"roles/#stakeholder","text":"Stakeholder Integration into GA4GH Leveraging The Beacon Framework in other domains Success Stories: Implementations Real world data","title":"Stakeholder"},{"location":"variant-queries/","text":"Genomic Variant Queries \u00b6 For querying of genomic variations Beacon v2 builds on and extends the options provided by earlier versions. Query Examples \u00b6 Beacon SNV Query \u00b6 Example: EIF4A1 Single Base Mutation \u00b6 This is an example for a single base mutation ( G>A ) in the EIF4A1 eukaryotic translation initiation factor 4A1. Beacon v2 GET Beacon v2 POST Beacon v1 Beacon v0.3 ?referenceName=NC_000017.11&start=7577120&referenceBases=G&alternateBases=A Optional \u00b6 datasetIds=__some-dataset-ids__ filters ... { \"$schema\":\"beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"genomicVariation\", \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-unity-testing/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\" } ] }, \"query\": { \"requestParameters\": { \"referenceName\": \"NC_000017.11\", \"start\": [7577120], \"referenceBases\": \"G\", \"alternateBases\": \"A\" } }, \"requestedGranularity\": \"record\", \"pagination\": { \"skip\": 0, \"limit\": 5 } } There are optional parameters [ datasetIds , filters ...] and also the option to specify the response type (through requestedGranularity ) and returned data format ( requestedSchemas ). Please follow this up in the framework documentation . ?assemblyId=GRCh38&referenceName=17&start=7577120&referenceBases=G&alternateBases=A Optional \u00b6 datasetIds=__some-dataset-ids__ ?ref=GRCh38&chrom=17&pos=7577121&referenceAllele=C&allele=A Optional \u00b6 beacon=__some-beacon-id__ Before Beacon v0.4 a 1-based coordinate system was being used. Beacon CNV Queries \u00b6 Example: TP53 Deletion Query by Coordinates \u00b6 The following example shows a \"bracket query\" for focal deletions of the TP53 gene locus: The start of the deletion has to occurr anywhere from approx. 2.5Mb 5' of the CDR start to just before the end of the CDR. The end of the matched CNVs has to be anywhere from the start of the gene locus to approx. 2.5Mb 3' of its end. This leads to matching of deletion CNVs which have at least some base overlap with the gene locus but are not larger than approx. 5Mb (operational definitions of focality vary between 1 and 5Mb). Beacon v2 GET Beacon v2 POST Beacon v1 Beacon v0.3 ?datasetIds=TEST&referenceName=NC_000017.11&variantType=DEL&start=5000000&start=7676592&end=7669607&end=10000000 Optional \u00b6 datasetIds=__some-dataset-ids__ filters ... { \"$schema\":\"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-unity-testing/main/framework/json/requests/beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"genomicVariation\", \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-unity-testing/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\" } ] }, \"query\": { \"requestParameters\": { \"referenceName\": \"NC_000017.11\", \"start\": [ 5000000, 7676592 ], \"end\": [ 7669607, 10000000 ], \"variantType\": \"DEL\" } }, \"requestedGranularity\": \"record\", \"pagination\": { \"skip\": 0, \"limit\": 5 } } There are optional parameters [ datasetIds , filters ...] and also the option to specify the response type (through requestedGranularity ) and returned data format ( requestedSchemas ). Please follow this up in the framework documentation . ?assemblyId=GRCh38&referenceName=17&variantType=DEL&start=5000000&start=7676592&end=7669607&end=10000000 Optional \u00b6 datasetIds=__some-dataset-ids__ CNV query options were only implemented with Beacon v0.4, based on Beacon + prototyping. (TBD) Query Parameter Change Log \u00b6 Beacon v2 \u00b6 use of sequence reference id's which obviate the need for a assemblyId parameter range queries with specified single start and end parameters a query should match any vatiant with partial or complete overlap with this sequence range additional parameters (e.g. referenceBases , alternateBases , variantType ...) may be used to scope the range query Beacon v1 (based on v0.4) \u00b6 switch to 0-based interbase coordinates for the API with 1-based coordinates recommended for query forms this represents the common GA4GH usage and the practice e.g. of the UCSC genome browser introduction of bracketed queries specification of intervals for start and end positions when querying multi-base variants allows for \"fuzzy\" CNV queries support of a variantType parameter to specify e.g. CNV queries ( DUP , DEL ) variantType is not required for precise queries with specified referenceBases and alternateBases","title":"Genomic Query Examples"},{"location":"variant-queries/#query-examples","text":"","title":"Query Examples"},{"location":"variant-queries/#beacon-snv-query","text":"","title":"Beacon SNV Query"},{"location":"variant-queries/#beacon-cnv-queries","text":"","title":"Beacon CNV Queries"},{"location":"variant-queries/#query-parameter-change-log","text":"","title":"Query Parameter Change Log"},{"location":"variant-queries/#beacon-v2","text":"use of sequence reference id's which obviate the need for a assemblyId parameter range queries with specified single start and end parameters a query should match any vatiant with partial or complete overlap with this sequence range additional parameters (e.g. referenceBases , alternateBases , variantType ...) may be used to scope the range query","title":"Beacon v2"},{"location":"variant-queries/#beacon-v1-based-on-v04","text":"switch to 0-based interbase coordinates for the API with 1-based coordinates recommended for query forms this represents the common GA4GH usage and the practice e.g. of the UCSC genome browser introduction of bracketed queries specification of intervals for start and end positions when querying multi-base variants allows for \"fuzzy\" CNV queries support of a variantType parameter to specify e.g. CNV queries ( DUP , DEL ) variantType is not required for precise queries with specified referenceBases and alternateBases","title":"Beacon v1 (based on v0.4)"},{"location":"implementations/org.progenetix/","text":"Progenetix & Beacon + The Beacon+ implementation - developed in the Python & MongoDB based bycon project - implements an expanding set of Beacon v2 paths for the Progenetix resource . Changes 2021-11-02: added /testMode example 2021-07-21: added /map endpoint (incomplete/unser construction) 2021-07-21: added /configuration endpoint (incomplete/unser construction) 2021-07-02: added for /core endpoint (here shown with query) 2021-07-02: update for /filteringTerms endpoint to v2b4 2021-06-25: updated for datasets parameter as object 2021-06-24: Updated response structure conforming to v2b4: response_summary removal of response root element & direct use of result_sets 2021-06-24: Updated query structure conforming to v2b4 entityType format fixed filters now objects 2021-06-23: New JSON POST example & topic 2021-06-07: Added variants_interpretations example 2021-05-29: New resultSets response format no change to front-end or examples here but change of bycon backend 2021-05-11: Added /analyses 2021-05-02: Added base path for BeaconInfoResponse 2021-04-26: First Version Scoped responses from query object \u00b6 In queries with a complete beaconRequestBody the type of the delivered data is independent of the path and determined in the requestedSchemas . So far, Beacon+ will compare the first of those to its supported responses and provide the results accordingly; it doesn't matter if the endpoint was /becon/biosamples/ or /beacon/variants/ etc. If no matching response type is found the path default will be used. Below is an example for the standard test \"small deletion CNVs in the CDKN2A locus, in gliomas\" Progenetix test query, here responding with the matched variants. Exchanging the entityType entry to { \"entityType\": \"BiosampleResponse\", \"schema:\": \"https://progenetix.org/services/schemas/Biosample/\"} would change this to a biosample response. The example ccan be tested by POSTing this as application/json to http://progenetix.org/beacon/variants/ or http://progenetix.org/beacon/biosamples/ . { \"$schema\":\"beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"variantInSample\", \"schema:\": \"https://progenetix.org/services/schemas/Variant/\" } ] }, \"query\": { \"requestParameters\": { \"datasets\": { \"datasetIds\": [\"progenetix\"] }, \"assemblyid\": \"GRCh38\", \"referenceName\": \"9\", \"start\": [21500001, 21975098], \"end\": [21967753, 22500000], \"variantType\": \"DEL\" } }, \"filters\": [ { \"id\": \"NCIT:C3058\" } ] } Paths \u00b6 Base / \u00b6 The root path provides the standard BeaconInfoResponse . / Base /filtering_terms \u00b6 /filtering_terms/ \u00b6 /filtering_terms/ /filtering_terms/ + query \u00b6 /filtering_terms/?filters=PMID /filtering_terms/?filters=NCIT,icdom Base /biosamples \u00b6 /biosamples/ + query \u00b6 /biosamples/?filters=cellosaurus:CVCL_0004 this example retrieves all biosamples having an annotation for the Cellosaurus CVCL_0004 identifier (K562) /biosamples/{id}/ \u00b6 /biosamples/pgxbs-kftva5c9/ retrieval of a single biosample /biosamples/?testMode=true \u00b6 /biosamples/?testMode=true retrieval of some random samples for testing API responses /biosamples/{id}/variants/ & /biosamples/{id}/variants_in_sample/ \u00b6 /biosamples/pgxbs-kftva5c9/variants/ /biosamples/pgxbs-kftva5c9/variants_in_sample/ retrieval of all variants from a single biosample currently - and especially since for a mostly CNV containing resource - variants means \"variant instances\" (or as in the early v2 draft variantsInSample ) Base /individuals \u00b6 /individuals/ + query \u00b6 /individuals/?filters=NCIT:C7541 this example retrieves all individuals having an annotation associated with NCIT:C7541 (retinoblastoma) in Progenetix, this particular code will be part of the annotation for the biosample(s) associated with the returned individual /individuals/?filters=PATO:0020001,NCIT:C9291 this query returns information about individuals with an anal carcinoma ( NCIT:C9291 ) and a known male genotypic sex ( PATO:0020001 ) in Progenetix, the information about its sex is associated with the Individual object (and rtherefore in the individuals collection), whereas the information about the cancer type is a property of the Biosample (and therefore stored in the biosamples collection) /individuals/{id}/ \u00b6 /individuals/pgxind-kftx25hb/ retrieval of a single individual /individuals/?testMode=true \u00b6 /individuals/?testMode=true retrieval of some random individuals for testing API responses /individuals/{id}/variants/ & /individuals/{id}/variants_in_sample/ \u00b6 /individuals/pgxind-kftx25hb/variants/ /individuals/pgxind-kftx25hb/variants_in_sample/ retrieval of all variants from a single individual currently - and especially since for a mostly CNV containing resource - variants means \"variant instances\" (or as in the early v2 draft variantsInSample ) Base /variants \u00b6 There is currently (April 2021) still some discussion about the implementation and naming of the different types of genomic variant endpoints. Since the Progenetix collections follow a \"variant observations\" principle all variant requests are directed against the local variants collection. If using g_variants or variants_in_sample , those will be treated as aliases. /variants/?testMode=true \u00b6 /variants/?testMode=true retrieval of some random variants for testing API responses /variants/ + query \u00b6 /variants/?assemblyId=GRCh38&referenceName=17&variantType=DEL&filterLogic=AND&start=7500000&start=7676592&end=7669607&end=7800000 This is an example for a Beacon \"Bracket Query\" which will return focal deletions in the TP53 locus (by position). /variants/{id}/ or /variants_in_sample/{id} or /g_variants/{id}/ \u00b6 /variants/pgxvar-5f5a35586b8c1d6d377b77f6/ /variants_in_sample/pgxvar-5f5a35586b8c1d6d377b77f6/ /variants/{id}/biosamples/ & variants_in_sample/{id}/biosamples/ \u00b6 /variants/pgxvar-5f5a35586b8c1d6d377b77f6/biosamples/ /variants_in_sample/pgxvar-5f5a35586b8c1d6d377b77f6/biosamples/ /variants/{id}/variants_interpretations/ \u00b6 This is yet (2021-06-07) an early test of a variants interpretations delivery for a given variant, implemented for a test dataset (therefore the added id). /variants/pgxvar-60b01d7fe517e5e929525eae/variants_interpretations/?datasetIds=cellosaurus Base /analyses (or /callsets ) \u00b6 The Beacon v2 /analyses endpoint accesses the Progenetix callsets collection documents, i.e. information about the genomic variants derived from a single analysis. In Progenetix the main use of these documents is the storage of e.g. CNV statistics or binned genome calls. /analyses/?testMode=true \u00b6 /analyses/?testMode=true retrieval of some random analyses for testing API responses /analyses/ + query \u00b6 /analyses/?filters=cellosaurus:CVCL_0004 this example retrieves all biosamples having an annotation for the Cellosaurus CVCL_0004 identifier (K562)","title":"Org.progenetix"},{"location":"implementations/org.progenetix/#scoped-responses-from-query-object","text":"In queries with a complete beaconRequestBody the type of the delivered data is independent of the path and determined in the requestedSchemas . So far, Beacon+ will compare the first of those to its supported responses and provide the results accordingly; it doesn't matter if the endpoint was /becon/biosamples/ or /beacon/variants/ etc. If no matching response type is found the path default will be used. Below is an example for the standard test \"small deletion CNVs in the CDKN2A locus, in gliomas\" Progenetix test query, here responding with the matched variants. Exchanging the entityType entry to { \"entityType\": \"BiosampleResponse\", \"schema:\": \"https://progenetix.org/services/schemas/Biosample/\"} would change this to a biosample response. The example ccan be tested by POSTing this as application/json to http://progenetix.org/beacon/variants/ or http://progenetix.org/beacon/biosamples/ . { \"$schema\":\"beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"variantInSample\", \"schema:\": \"https://progenetix.org/services/schemas/Variant/\" } ] }, \"query\": { \"requestParameters\": { \"datasets\": { \"datasetIds\": [\"progenetix\"] }, \"assemblyid\": \"GRCh38\", \"referenceName\": \"9\", \"start\": [21500001, 21975098], \"end\": [21967753, 22500000], \"variantType\": \"DEL\" } }, \"filters\": [ { \"id\": \"NCIT:C3058\" } ] }","title":"Scoped responses from query object"},{"location":"implementations/org.progenetix/#paths","text":"","title":"Paths"},{"location":"schemas-md/analyses_defaultSchema/","text":"Field Description Type Properties Example Enum aligner Reference to mapping/alignment software string NA bwa-0.7.8 NA analysisDate Date at which analysis was performed. string NA NA NA biosampleId Reference to Biosample ID. string NA S0001 NA id Analysis reference ID (external accession or internal ID) string NA NA NA individualId Reference to Individual ID. string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA pipelineName Analysis pipeline and version if a standardized pipeline was used string NA NA NA pipelineRef Link to Analysis pipeline resource string NA NA NA runId Run identifier (external accession or internal ID). string NA SRR10903401 NA variantCaller Reference to variant calling software / pipeline string NA GATK4.0 NA","title":"Analyses"},{"location":"schemas-md/beacon_terms/","text":"affected age ageAtExposure ageAtOnset ageAtProcedure ageGroup ageOfOnset ageRange aligner alleleFrequency alleleOrigin alternateBases aminoacidChanges analysisDate analysisId annotatedWith assayCode assemblyId availability availabilityCount biosampleId biosampleStatus bodySite caseLevelData category clinicalInterpretations clinicalRelevance clinVarIds cohortDataTypes cohortDesign cohortExclusionCriteria cohortId cohortInclusionCriteria cohortName cohortSize cohortType collectionDate collectionEvents collectionMoment conditionId createDateTime dataUseConditions date dateOfProcedure description diagnosticMarkers disease diseaseCode diseaseConditions diseases distribution dose duoDataUse duration effect end ethnicities ethnicity eventAgeRange eventCases eventControls eventDataTypes eventDate eventDiseases eventEthnicities eventGenders eventLocations eventNum eventPhenotypes eventSize eventTimeline evidence evidenceCode evidenceType excluded exposureCode exposures externalUrl familyHistory featureClass featureID featureType frequencies frequency frequencyInPopulations genders geneIds genomicFeatures genomicHGVSId geographicOrigin histologicalDiagnosis id identifiers individualId info interventionsOrProcedures iso8601duration label libraryLayout librarySelection librarySource libraryStrategy locations measurements measurementValue measures memberId members modifiers molecularAttributes molecularEffects name notes numSubjects observationMoment obtentionProcedure onset pathologicalStage pathologicalTnmFinding pedigrees phenotypicConditions phenotypicEffects phenotypicFeatures pipelineName pipelineRef platform platformModel population position procedure procedureCode proteinHGVSIds reference referenceBases refseqId resolution role route runDate runId sampleOriginDetail sampleOriginType sampleProcessing sampleStorage severityLevel sex source sourceReference stage start toolName toolReferences transcriptHGVSIds treatmentCode treatments tumorGrade tumorProgression units updateDateTime value variantAlternativeIds variantCaller variantInternalId variantLevelData variantType version zygosity","title":"Terms List"},{"location":"schemas-md/biosamples_defaultSchema/","text":"Field description type properties example enum biosampleStatus Definition of an ontology term. object id , label NA NA collectionDate Date of biosample collection in ISO8601 format. string NA 2021-04-23 NA collectionMoment Individual's or cell cullture age at the time of sample collection in the ISO8601 duration format P[n]Y[n]M[n]DT[n]H[n]M[n]S . string NA P32Y6M1D, P7D NA diagnosticMarkers Clinically relevant biomarkers. RECOMMENDED. array id , label NA NA histologicalDiagnosis Definition of an ontology term. object id , label NA NA id Biosample identifier (external accession or internal ID). string NA S0001 NA individualId Reference to the individual from which that sample was obtained. string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA measurements List of measurements of the sample. array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA notes Any relevant info about the biosample that does not fit into any other field in the schema. string NA Some free text NA obtentionProcedure Class describing a clinical procedure or intervention. object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA pathologicalStage Definition of an ontology term. object id , label NA NA pathologicalTnmFinding Pathological TNM findings, if applicable, preferably as subclass of NCIT:C48698 - Cancer TNM Finding Category (NCIT:C48698). RECOMMENDED. array id , label id:NCIT:C48725, label:T2a Stage Finding id:NCIT:C48709, label:N1c Stage Finding id:NCIT:C48699, label:M0 Stage Finding NA phenotypicFeatures List of phenotypic abnormalities of the sample. RECOMMENDED. array evidence , excluded , featureType , modifiers , notes , onset , resolution , severityLevel NA NA sampleOriginDetail Definition of an ontology term. object id , label NA NA sampleOriginType Definition of an ontology term. object id , label NA NA sampleProcessing Definition of an ontology term. object id , label NA NA sampleStorage Definition of an ontology term. object id , label NA NA tumorGrade Definition of an ontology term. object id , label NA NA tumorProgression Definition of an ontology term. object id , label NA NA","title":"Biosamples"},{"location":"schemas-md/cohorts_defaultSchema/","text":"Field description type properties example enum cohortDataTypes Type of information. Preferably values from Genomics Cohorts Knowledge Ontology (GeCKO) or others when GeCKO is not applicable. array id , label id:OGMS:0000015, label:clinical history id:OBI:0000070, label:genotyping assay id:OMIABIS:0000060, label:survey data NA cohortDesign Definition of an ontology term. object id , label NA NA cohortExclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA cohortId Cohort identifier. For \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4cohorts this field is set by the implementer. For \u00b4user-defined\u00b4 this unique identifier could be generated upon the query that defined the cohort, but could be later edited by the user. string NA NA NA cohortInclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA cohortName Name of the cohort. For \u00b4user-defined\u00b4 this field could be generated upon the query, e.g. a value that is a concatenationor some representation of the user query. string NA Wellcome Trust Case Control Consortium, GCAT Genomes for Life NA cohortSize Count of unique Individuals in cohort (individuals meeting criteria for \u00b4user-defined\u00b4 cohorts). If not previously known, it could be calculated by counting the individuals in the cohort. integer NA 14765, 20000 NA cohortType Cohort type by its definition. If a cohort is declared \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4 criteria are to be entered in cohort_inclusion_criteria; if a cohort is declared \u2018user-defined' cohort_inclusion_criteria could be automatically populated from the parameters used to perform the query. string NA NA study-defined, beacon-defined, user-defined collectionEvents TBD array eventAgeRange , eventCases , eventControls , eventDataTypes , eventDate , eventDiseases , eventEthnicities , eventGenders , eventLocations , eventNum , eventPhenotypes , eventSize , eventTimeline NA NA","title":"Cohorts"},{"location":"schemas-md/datasets_defaultSchema/","text":"Field description type properties example enum createDateTime The time the dataset was created (ISO 8601 format) string NA 2012-07-29, 2017-01-17T20:33:40Z NA dataUseConditions Data use conditions ruling this dataset object duoDataUse NA NA description Description of the dataset string NA This dataset provides examples of the actual data in this Beacon instance. NA externalUrl URL to an external system providing more dataset information (RFC 3986 format). string NA example.org/wiki/Main_Page NA id Unique identifier of the dataset string NA ds01010101 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA name Name of the dataset string NA Dataset with synthetic data NA updateDateTime The time the dataset was updated in (ISO 8601 format) string NA 2012-07-19, 2017-01-17T20:33:40Z NA version Version of the dataset string NA v1.1 NA","title":"Datasets"},{"location":"schemas-md/genomicVariations_defaultSchema/","text":"Field description type properties example enum alternateBases Alternate bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can beused as a standalone base of any type or within a partially knownsequence. As example, a query of ANNT the Ns can take take any form of[ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. an empty value is used in the case of deletions with the maximally trimmed, deleted sequence being indicated in ReferenceBases Categorical variant queries, e.g. such not being represented through sequence & position, make use of the variantType parameter. * Either alternateBases or variantType is required. string NA NA NA caseLevelData caseLevelData reports about the variation instances observed in individual analyses. array alleleOrigin , analysisId , biosampleId , clinicalInterpretations , id , individualId , phenotypicEffects , runId , zygosity NA NA frequencyInPopulations NA array frequencies , source , sourceReference , version NA NA identifiers NA object clinVarIds , genomicHGVSId , proteinHGVSIds , transcriptHGVSIds , variantAlternativeIds NA NA molecularAttributes NA object aminoacidChanges , geneIds , genomicFeatures , molecularEffects NA NA position This section groups all attributes that allows to identify a variant via its position in the genome. object assemblyId , end , refseqId , start NA NA referenceBases Reference bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can be used as a standalone base of any type or within a partially known sequence. As example, a query of ANNT the Ns can take take any form of [ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. * an empty value is used in the case of insertions with the maximally trimmed, inserted sequence being indicated in AlternateBases . NOTE: Many Beacon instances could not support UIPAC codes and it is not mandatory for them to do so. In such cases the use of [ACGTN] is mandated. string NA NA NA variantInternalId Reference to the internal variant ID. This represents the primary key/identifier of that variant inside a given Beacon instance. Different Beacon instances may use identical id values, referring to unrelated variants. Public identifiers such as the GA4GH Variant Representation Id (VRSid) MUST be returned in the identifiers section. A Beacon instance can, of course, use the VRSid as their own internal id but still MUST represent this then in the identifiers section. string NA NA NA variantLevelData NA object clinicalInterpretations , phenotypicEffects NA NA variantType The variantType declares the nature of the variation in relation to a reference. In a response, it is used to describe the variation. In a request, it is used to declare the type of event the Beacon client is looking for. If in queries variants can not be defined through a sequence of one or more bases ( precise variants) it can be used standalone (i.e. without alternateBases ) together with positional parameters. Examples here are e.g. queries for structural variants such as DUP (increased allelic count of material from the genomic region between start and end positions without assumption about the placement of the additional sequence) or DEL (deletion of sequence following start ). Either alternateBases or variantType is required, with the exception of range queries (single start and end parameters). string NA SNP, DEL, DUP, BND NA","title":"Genomic Variations"},{"location":"schemas-md/individuals_defaultSchema/","text":"Field description type properties example enum diseases List of disease(s) been diagnosed to the individual, defined by disease ontology ID(s), age of onset, stage and the presence of family history. array ageOfOnset , diseaseCode , familyHistory , notes , severityLevel , stage NA NA ethnicity Definition of an ontology term. object id , label NA NA exposures NA array ageAtExposure , date , duration , exposureCode , units , value NA NA geographicOrigin Definition of an ontology term. object id , label NA NA id Individual identifier (internal ID). string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA interventionsOrProcedures NA array ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA measures NA array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA pedigrees NA array disease , id , members , numSubjects NA NA phenotypicFeatures NA array evidence , excluded , featureType , modifiers , notes , onset , resolution , severityLevel NA NA sex Definition of an ontology term. object id , label NA NA treatments NA array ageAtOnset , dose , duration , frequency , route , treatmentCode , units NA NA","title":"Individuals"},{"location":"schemas-md/runs_defaultSchema/","text":"Field description type properties example enum biosampleId Reference to the biosample ID. string NA 008dafdd-a3d1-4801-8c0a-8714e2b58e48 NA id Run ID. string NA SRR10903401 NA individualId Reference to the individual ID. string NA TCGA-AO-A0JJ NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA libraryLayout Ontology value for the library layout e.g \"PAIRED\", \"SINGLE\" #todo add Ontology name? string NA NA PAIRED, SINGLE librarySelection Selection method for library preparation, e.g \"RANDOM\", \"RT-PCR\" string NA RANDOM, RT-PCR NA librarySource Definition of an ontology term. object id , label NA NA libraryStrategy Library strategy, e.g. \"WIG'S\" string NA NA NA platform General platform technology label. It SHOULD be a subset of the platformModel and used only for query convenience, e.g. \"return everything sequenced with Illimuna\", where the specific model is not relevant string NA Illumina, Oxford Nanopore, Affymetrix NA platformModel Definition of an ontology term. object id , label NA NA runDate Date at which the experiment was performed. string NA NA NA","title":"Runs"},{"location":"schemas-md/obj/affected/","text":"Field description type properties example enum affected Is the individual affected by the disease in the pedigree? boolean NA NA NA","title":"Affected"},{"location":"schemas-md/obj/age/","text":"Field description type properties example enum age Age value definition. object iso8601duration NA NA","title":"Age"},{"location":"schemas-md/obj/ageAtExposure/","text":"Field description type properties example enum ageAtExposure Age value definition. object iso8601duration NA NA","title":"ageAtExposure"},{"location":"schemas-md/obj/ageAtOnset/","text":"Field description type properties example enum ageAtOnset Age value definition. object iso8601duration NA NA","title":"ageAtOnset"},{"location":"schemas-md/obj/ageAtProcedure/","text":"Field description type properties example enum ageAtProcedure Definition of a wrapper for various time descriptors. object age , ageGroup , ageRange NA NA","title":"ageAtProcedure"},{"location":"schemas-md/obj/ageGroup/","text":"Field description type properties example enum ageGroup Definition of an ontology term. object id , label NA NA","title":"ageGroup"},{"location":"schemas-md/obj/ageOfOnset/","text":"Field description type properties example enum ageOfOnset Age value definition. object iso8601duration NA NA","title":"ageOfOnset"},{"location":"schemas-md/obj/ageRange/","text":"Field description type properties example enum ageRange Age range definition. object end , start NA NA","title":"ageRange"},{"location":"schemas-md/obj/aligner/","text":"Field description type properties example enum aligner Reference to mapping/alignment software string NA bwa-0.7.8 NA","title":"Aligner"},{"location":"schemas-md/obj/alleleFrequency/","text":"Field description type properties example enum alleleFrequency Allele frequency between 0 and 1. number NA 3.186e-05 NA","title":"alleleFrequency"},{"location":"schemas-md/obj/alleleOrigin/","text":"Field description type properties example enum alleleOrigin Definition of an ontology term. object id , label NA NA","title":"alleleOrigin"},{"location":"schemas-md/obj/alternateBases/","text":"Field description type properties example enum alternateBases Alternate bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can beused as a standalone base of any type or within a partially knownsequence. As example, a query of ANNT the Ns can take take any form of[ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. an empty value is used in the case of deletions with the maximally trimmed, deleted sequence being indicated in ReferenceBases Categorical variant queries, e.g. such not being represented through sequence & position, make use of the variantType parameter. * Either alternateBases or variantType is required. string NA NA NA","title":"alternateBases"},{"location":"schemas-md/obj/aminoacidChanges/","text":"Field description type properties example enum aminoacidChanges Lisf of change(s) at aminoacid level for protein affecting variants. array NA V304* NA","title":"aminoacidChanges"},{"location":"schemas-md/obj/analysisDate/","text":"Field description type properties example enum analysisDate Date at which analysis was performed. string NA NA NA","title":"analysisDate"},{"location":"schemas-md/obj/analysisId/","text":"Field description type properties example enum analysisId Reference to the bioinformatics analysis ID ( analysis.id ) string NA pgxcs-kftvldsu NA","title":"analysisId"},{"location":"schemas-md/obj/annotatedWith/","text":"Field description type properties example enum annotatedWith NA object toolName , toolReferences , version NA NA","title":"annotatedWith"},{"location":"schemas-md/obj/assayCode/","text":"Field description type properties example enum assayCode Definition of an ontology term. object id , label NA NA","title":"assayCode"},{"location":"schemas-md/obj/assemblyId/","text":"Field description type properties example enum assemblyId Genomic assembly accession and version as RefSqeq assembly accession (e.g. 'GCF_000001405.39') or a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. 'hg38') or Genome Reference Consortium Human (e.g. 'GRCh38.p13') names. string NA GCF_000001405.39, hg38, GRCh38.p13 NA","title":"assemblyId"},{"location":"schemas-md/obj/availability/","text":"Field description type properties example enum availability data availability boolean NA NA NA","title":"Availability"},{"location":"schemas-md/obj/availabilityCount/","text":"Field description type properties example enum availabilityCount count of individuals with data available integer NA NA NA","title":"availabilityCount"},{"location":"schemas-md/obj/biosampleId/","text":"Field description type properties example enum biosampleId Reference to the biosample ID. string NA 008dafdd-a3d1-4801-8c0a-8714e2b58e48 NA","title":"biosampleId"},{"location":"schemas-md/obj/biosampleStatus/","text":"Field description type properties example enum biosampleStatus Definition of an ontology term. object id , label NA NA","title":"biosampleStatus"},{"location":"schemas-md/obj/bodySite/","text":"Field description type properties example enum bodySite Definition of an ontology term. object id , label NA NA","title":"bodySite"},{"location":"schemas-md/obj/caseLevelData/","text":"Field description type properties example enum caseLevelData caseLevelData reports about the variation instances observed in individual analyses. array alleleOrigin , analysisId , biosampleId , clinicalInterpretations , id , individualId , phenotypicEffects , runId , zygosity NA NA","title":"caseLevelData"},{"location":"schemas-md/obj/category/","text":"Field description type properties example enum category Definition of an ontology term. object id , label NA NA","title":"Category"},{"location":"schemas-md/obj/clinVarIds/","text":"Field description type properties example enum clinVarIds NA array NA RCV000009910.19, 9325, VCV000009325.28 NA","title":"clinVarIds"},{"location":"schemas-md/obj/clinicalInterpretations/","text":"Field description type properties example enum clinicalInterpretations NA array annotatedWith , category , clinicalRelevance , conditionId , effect , evidenceType NA NA","title":"clinicalInterpretations"},{"location":"schemas-md/obj/clinicalRelevance/","text":"Field description type properties example enum clinicalRelevance A value from the five-tiered classification from the American College of Medical Genetics (ACMG) designed to describe the likelihood that a genomic sequence variant is causative of an inherited disease. (NCIT:C168798). string NA pathogenic benign, likely benign, uncertain significance, likely pathogenic, pathogenic","title":"clinicalRelevance"},{"location":"schemas-md/obj/cohortDataTypes/","text":"Field description type properties example enum cohortDataTypes Type of information. Preferably values from Genomics Cohorts Knowledge Ontology (GeCKO) or others when GeCKO is not applicable. array id , label id:OGMS:0000015, label:clinical history id:OBI:0000070, label:genotyping assay id:OMIABIS:0000060, label:survey data NA","title":"cohortDataTypes"},{"location":"schemas-md/obj/cohortDesign/","text":"Field description type properties example enum cohortDesign Definition of an ontology term. object id , label NA NA","title":"cohortDesign"},{"location":"schemas-md/obj/cohortExclusionCriteria/","text":"Field description type properties example enum cohortExclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA","title":"cohortExclusionCriteria"},{"location":"schemas-md/obj/cohortId/","text":"Field description type properties example enum cohortId Cohort identifier. For \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4cohorts this field is set by the implementer. For \u00b4user-defined\u00b4 this unique identifier could be generated upon the query that defined the cohort, but could be later edited by the user. string NA NA NA","title":"cohortId"},{"location":"schemas-md/obj/cohortInclusionCriteria/","text":"Field description type properties example enum cohortInclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA","title":"cohortInclusionCriteria"},{"location":"schemas-md/obj/cohortName/","text":"Field description type properties example enum cohortName Name of the cohort. For \u00b4user-defined\u00b4 this field could be generated upon the query, e.g. a value that is a concatenationor some representation of the user query. string NA Wellcome Trust Case Control Consortium, GCAT Genomes for Life NA","title":"cohortName"},{"location":"schemas-md/obj/cohortSize/","text":"Field description type properties example enum cohortSize Count of unique Individuals in cohort (individuals meeting criteria for \u00b4user-defined\u00b4 cohorts). If not previously known, it could be calculated by counting the individuals in the cohort. integer NA 14765, 20000 NA","title":"cohortSize"},{"location":"schemas-md/obj/cohortType/","text":"Field description type properties example enum cohortType Cohort type by its definition. If a cohort is declared \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4 criteria are to be entered in cohort_inclusion_criteria; if a cohort is declared \u2018user-defined' cohort_inclusion_criteria could be automatically populated from the parameters used to perform the query. string NA NA study-defined, beacon-defined, user-defined","title":"cohortType"},{"location":"schemas-md/obj/collectionDate/","text":"Field description type properties example enum collectionDate Date of biosample collection in ISO8601 format. string NA 2021-04-23 NA","title":"collectionDate"},{"location":"schemas-md/obj/collectionEvents/","text":"Field description type properties example enum collectionEvents TBD array eventAgeRange , eventCases , eventControls , eventDataTypes , eventDate , eventDiseases , eventEthnicities , eventGenders , eventLocations , eventNum , eventPhenotypes , eventSize , eventTimeline NA NA","title":"collectionEvents"},{"location":"schemas-md/obj/collectionMoment/","text":"Field description type properties example enum collectionMoment Individual's or cell cullture age at the time of sample collection in the ISO8601 duration format P[n]Y[n]M[n]DT[n]H[n]M[n]S . string NA P32Y6M1D, P7D NA","title":"collectionMoment"},{"location":"schemas-md/obj/conditionId/","text":"Field description type properties example enum conditionId Internal identifier of the phenotype or clinical effect. string NA disease1, phen2234 NA","title":"conditionId"},{"location":"schemas-md/obj/createDateTime/","text":"Field description type properties example enum createDateTime The time the dataset was created (ISO 8601 format) string NA 2012-07-29, 2017-01-17T20:33:40Z NA","title":"createDateTime"},{"location":"schemas-md/obj/dataUseConditions/","text":"Field description type properties example enum dataUseConditions Data use conditions ruling this dataset object duoDataUse NA NA","title":"dataUseConditions"},{"location":"schemas-md/obj/date/","text":"Field description type properties example enum date Date of the exposure in ISO8601 format. string NA NA NA","title":"Date"},{"location":"schemas-md/obj/dateOfProcedure/","text":"Field description type properties example enum dateOfProcedure Date of procedure, in ISO8601 format string NA 2010-07-10 NA","title":"dateOfProcedure"},{"location":"schemas-md/obj/description/","text":"Field description type properties example enum description Description of the dataset string NA This dataset provides examples of the actual data in this Beacon instance. NA","title":"Description"},{"location":"schemas-md/obj/diagnosticMarkers/","text":"Field description type properties example enum diagnosticMarkers Clinically relevant biomarkers. RECOMMENDED. array id , label NA NA","title":"diagnosticMarkers"},{"location":"schemas-md/obj/disease/","text":"Field description type properties example enum disease Diseases diagnosed e.g. to an individual, defined by diseaseID, age of onset, stage, level of severity, outcome and the presence of family history. object ageOfOnset , diseaseCode , familyHistory , notes , severityLevel , stage NA NA","title":"Disease"},{"location":"schemas-md/obj/diseaseCode/","text":"Field description type properties example enum diseaseCode Definition of an ontology term. object id , label NA NA","title":"diseaseCode"},{"location":"schemas-md/obj/diseaseConditions/","text":"Field description type properties example enum diseaseConditions Diseases in cohort inclusion criteria array ageOfOnset , diseaseCode , familyHistory , notes , severityLevel , stage NA NA","title":"diseaseConditions"},{"location":"schemas-md/obj/diseases/","text":"Field description type properties example enum diseases List of disease(s) been diagnosed to the individual, defined by disease ontology ID(s), age of onset, stage and the presence of family history. array ageOfOnset , diseaseCode , familyHistory , notes , severityLevel , stage NA NA","title":"Diseases"},{"location":"schemas-md/obj/distribution/","text":"Field description type properties example enum distribution List of categories and results or counts for each category. object genders:HASH(0x55bbecc3e160) NA","title":"Distribution"},{"location":"schemas-md/obj/dose/","text":"Field description type properties example enum dose The amount of any substance administered over a specific period of time. [ NCIT:C15682 ] number NA NA NA","title":"Dose"},{"location":"schemas-md/obj/duoDataUse/","text":"Field description type properties example enum duoDataUse duoDataUse array id , label , modifiers , version id:DUO:0000007, label:disease specific research, version:17-07-2016 NA","title":"duoDataUse"},{"location":"schemas-md/obj/duration/","text":"Field description type properties example enum duration Exposure duration in ISO8601 format string NA P32Y6M1D NA","title":"Duration"},{"location":"schemas-md/obj/effect/","text":"Field description type properties example enum effect Definition of an ontology term. object id , label NA NA","title":"Effect"},{"location":"schemas-md/obj/end/","text":"Field description type properties example enum end Precise or bracketing the end of the variant, for variants not specified by their sequence content (e.g. structural variants, particularly CNVs). array NA [] [1200] [1200,1350] NA","title":"End"},{"location":"schemas-md/obj/ethnicities/","text":"Field description type properties example enum ethnicities Ethnias in cohort inclusion criteria array id , label NA NA","title":"Ethnicities"},{"location":"schemas-md/obj/ethnicity/","text":"Field description type properties example enum ethnicity Definition of an ontology term. object id , label NA NA","title":"Ethnicity"},{"location":"schemas-md/obj/eventAgeRange/","text":"Field description type properties example enum eventAgeRange Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventAgeRange"},{"location":"schemas-md/obj/eventCases/","text":"Field description type properties example enum eventCases count of cases integer NA 543, 20 NA","title":"eventCases"},{"location":"schemas-md/obj/eventControls/","text":"Field description type properties example enum eventControls count of controls integer NA 1000, 22 NA","title":"eventControls"},{"location":"schemas-md/obj/eventDataTypes/","text":"Field description type properties example enum eventDataTypes Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventDataTypes"},{"location":"schemas-md/obj/eventDate/","text":"Field description type properties example enum eventDate date of collection event/data point string NA 2018-10-1, 2019-04-23, 2020-09-11 NA","title":"eventDate"},{"location":"schemas-md/obj/eventDiseases/","text":"Field description type properties example enum eventDiseases Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventDiseases"},{"location":"schemas-md/obj/eventEthnicities/","text":"Field description type properties example enum eventEthnicities Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventEthnicities"},{"location":"schemas-md/obj/eventGenders/","text":"Field description type properties example enum eventGenders Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventGenders"},{"location":"schemas-md/obj/eventLocations/","text":"Field description type properties example enum eventLocations Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventLocations"},{"location":"schemas-md/obj/eventNum/","text":"Field description type properties example enum eventNum cardinality of the collection event / data point in a series integer NA 1, 2, 3, 4 NA","title":"eventNum"},{"location":"schemas-md/obj/eventPhenotypes/","text":"Field description type properties example enum eventPhenotypes Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventPhenotypes"},{"location":"schemas-md/obj/eventSize/","text":"Field description type properties example enum eventSize Count of individuals in cohort at data point (for \u00b4user-defined\u00b4 cohorts, this is individuals meeting criteria) obtained from individual level info in database. integer NA 1543, 42 NA","title":"eventSize"},{"location":"schemas-md/obj/eventTimeline/","text":"Field description type properties example enum eventTimeline Aggregated information of dates of visit/diagnostic/inclusion in study obtained from individual level info in database. Will coincide with collection event date for multi-time object end , start NA NA","title":"eventTimeline"},{"location":"schemas-md/obj/evidence/","text":"Field description type properties example enum evidence Definition of an evidence class. object evidenceCode , reference NA NA","title":"Evidence"},{"location":"schemas-md/obj/evidenceCode/","text":"Field description type properties example enum evidenceCode Definition of an ontology term. object id , label NA NA","title":"evidenceCode"},{"location":"schemas-md/obj/evidenceType/","text":"Field description type properties example enum evidenceType Definition of an ontology term. object id , label NA NA","title":"evidenceType"},{"location":"schemas-md/obj/excluded/","text":"Field description type properties example enum excluded (from Phenopackets v.2) Flag to indicate whether the disease was observed or not. Default is \u2018false\u2019, in other words the disease was observed. Therefore it is only required in cases to indicate that the disease was looked for, but found to be absent. More formally, this modifier indicates the logical negation of the OntologyClass used in the 'featureType' field. CAUTION It is imperative to check this field for correct interpretation of the disease! boolean NA NA NA","title":"Excluded"},{"location":"schemas-md/obj/exposureCode/","text":"Field description type properties example enum exposureCode Definition of an ontology term. object id , label NA NA","title":"exposureCode"},{"location":"schemas-md/obj/exposures/","text":"Field description type properties example enum exposures NA array ageAtExposure , date , duration , exposureCode , units , value NA NA","title":"Exposures"},{"location":"schemas-md/obj/externalUrl/","text":"Field description type properties example enum externalUrl URL to an external system providing more dataset information (RFC 3986 format). string NA example.org/wiki/Main_Page NA","title":"externalUrl"},{"location":"schemas-md/obj/familyHistory/","text":"Field description type properties example enum familyHistory Boolean indicating determined or self-reported presence of family history of the disease. boolean NA 1 NA","title":"familyHistory"},{"location":"schemas-md/obj/featureClass/","text":"Field description type properties example enum featureClass Definition of an ontology term. object id , label NA NA","title":"featureClass"},{"location":"schemas-md/obj/featureID/","text":"Field description type properties example enum featureID Definition of an ontology term. object id , label NA NA","title":"featureID"},{"location":"schemas-md/obj/featureType/","text":"Field description type properties example enum featureType Definition of an ontology term. object id , label NA NA","title":"featureType"},{"location":"schemas-md/obj/frequencies/","text":"Field description type properties example enum frequencies NA array alleleFrequency , population NA NA","title":"Frequencies"},{"location":"schemas-md/obj/frequency/","text":"Field description type properties example enum frequency The number of times a substance is administered within a specific time period. [ NCIT:C89081 ] string NA NA NA","title":"Frequency"},{"location":"schemas-md/obj/frequencyInPopulations/","text":"Field description type properties example enum frequencyInPopulations NA array frequencies , source , sourceReference , version NA NA","title":"frequencyInPopulations"},{"location":"schemas-md/obj/genders/","text":"Field description type properties example enum genders Gender(s) in cohort inclusion criteria array id , label NA NA","title":"Genders"},{"location":"schemas-md/obj/geneIds/","text":"Field description type properties example enum geneIds NA array NA NA NA","title":"geneIds"},{"location":"schemas-md/obj/genomicFeatures/","text":"Field description type properties example enum genomicFeatures List of Genomic feature(s) affected by the variant. array featureClass , featureID NA NA","title":"genomicFeatures"},{"location":"schemas-md/obj/genomicHGVSId/","text":"Field description type properties example enum genomicHGVSId HGVSId descriptor. string NA NC_000017.11:g.43057063G>A NA","title":"genomicHGVSId"},{"location":"schemas-md/obj/geographicOrigin/","text":"Field description type properties example enum geographicOrigin Definition of an ontology term. object id , label NA NA","title":"geographicOrigin"},{"location":"schemas-md/obj/histologicalDiagnosis/","text":"Field description type properties example enum histologicalDiagnosis Definition of an ontology term. object id , label NA NA","title":"histologicalDiagnosis"},{"location":"schemas-md/obj/id/","text":"Field description type properties example enum id Run ID. string NA SRR10903401 NA","title":"Id"},{"location":"schemas-md/obj/identifiers/","text":"Field description type properties example enum identifiers NA object clinVarIds , genomicHGVSId , proteinHGVSIds , transcriptHGVSIds , variantAlternativeIds NA NA","title":"Identifiers"},{"location":"schemas-md/obj/individualId/","text":"Field description type properties example enum individualId Reference to the individual ID. string NA TCGA-AO-A0JJ NA","title":"individualId"},{"location":"schemas-md/obj/info/","text":"Field description type properties example enum info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA","title":"Info"},{"location":"schemas-md/obj/interventionsOrProcedures/","text":"Field description type properties example enum interventionsOrProcedures NA array ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"interventionsOrProcedures"},{"location":"schemas-md/obj/iso8601duration/","text":"Field description type properties example enum iso8601duration Represents age as a ISO8601 duration (e.g., P40Y10M05D). string NA P32Y6M1D NA","title":"Iso8601duration"},{"location":"schemas-md/obj/label/","text":"Field description type properties example enum label The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context. string NA NA NA","title":"Label"},{"location":"schemas-md/obj/libraryLayout/","text":"Field description type properties example enum libraryLayout Ontology value for the library layout e.g \"PAIRED\", \"SINGLE\" #todo add Ontology name? string NA NA PAIRED, SINGLE","title":"libraryLayout"},{"location":"schemas-md/obj/librarySelection/","text":"Field description type properties example enum librarySelection Selection method for library preparation, e.g \"RANDOM\", \"RT-PCR\" string NA RANDOM, RT-PCR NA","title":"librarySelection"},{"location":"schemas-md/obj/librarySource/","text":"Field description type properties example enum librarySource Definition of an ontology term. object id , label NA NA","title":"librarySource"},{"location":"schemas-md/obj/libraryStrategy/","text":"Field description type properties example enum libraryStrategy Library strategy, e.g. \"WGS\" string NA NA NA","title":"libraryStrategy"},{"location":"schemas-md/obj/locations/","text":"Field description type properties example enum locations Geographic location(s) in cohort inclusion criteria array id , label NA NA","title":"Locations"},{"location":"schemas-md/obj/measurementValue/","text":"Field description type properties example enum measurementValue The result of the measurement NA NA NA NA","title":"measurementValue"},{"location":"schemas-md/obj/measurements/","text":"Field description type properties example enum measurements List of measurements of the sample. array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA","title":"Measurements"},{"location":"schemas-md/obj/measures/","text":"Field description type properties example enum measures NA array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA","title":"Measures"},{"location":"schemas-md/obj/memberId/","text":"Field description type properties example enum memberId Identifier of the individual. The individual could be part of the same Beacon datasets or not, in which case the information here is meant to complete the pedigree. If the individual is also in the dataset use that Individual ID. If it is not the in the dataset, use a non-collading ID, e.g. concatenating the Pedigree ID with a local ID, similarly to the example 'Pedigree1001-m1'. string NA Pedigree1001-m1, Ind0012122 NA","title":"memberId"},{"location":"schemas-md/obj/members/","text":"Field description type properties example enum members List of members of the pedigree. If the current pedigree definition is attached to the proband, it contains the whole list of pedigree members, including the proband. If the definition is attached to an individual different than the proband, it only contains two entries: one that describes that member, e.g. the proband mother or father, and one that points to the proband. array affected , memberId , role NA NA","title":"Members"},{"location":"schemas-md/obj/modifiers/","text":"Field description type properties example enum modifiers For instance one or more terms from HPO Clinical Modifier (HP:0012823). This subontology is designed to provide terms to characterize and specify the phenotypic abnormalities defined in the Phenotypic abnormality subontology, with respect to severity, laterality, age of onset, and other aspects. [ HPO:probinson ] array id , label id:HP:0032500, label:Exacerbated by tobacco use id:HP:4000053, label:Displaced fracture NA","title":"Modifiers"},{"location":"schemas-md/obj/molecularAttributes/","text":"Field description type properties example enum molecularAttributes NA object aminoacidChanges , geneIds , genomicFeatures , molecularEffects NA NA","title":"molecularAttributes"},{"location":"schemas-md/obj/molecularEffects/","text":"Field description type properties example enum molecularEffects Ontology term that includes describes the class of molecular consequence generated by the variant. Values from Ensembl Glossary Variant Consequence (ENSGLOSSARY:0000134 ontology branch) are recommended, e.g. Stop gained, Missense variant, Coding sequence variant. array id , label id:ENSGLOSSARY:0000143, label:Stop gained id:ENSGLOSSARY:0000150, label:Missense variant NA","title":"molecularEffects"},{"location":"schemas-md/obj/name/","text":"Field description type properties example enum name Name of the dataset string NA Dataset with synthetic data NA","title":"Name"},{"location":"schemas-md/obj/notes/","text":"Field description type properties example enum notes Unstructured text to describe additional properties of this disease instance. string NA Some free text NA","title":"Notes"},{"location":"schemas-md/obj/numSubjects/","text":"Field description type properties example enum numSubjects Total number of subjects in pedigree. integer NA 10 NA","title":"numSubjects"},{"location":"schemas-md/obj/observationMoment/","text":"Field description type properties example enum observationMoment Definition of a wrapper for various time descriptors. object age , ageGroup , ageRange NA NA","title":"observationMoment"},{"location":"schemas-md/obj/obtentionProcedure/","text":"Field description type properties example enum obtentionProcedure Class describing a clinical procedure or intervention. object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"obtentionProcedure"},{"location":"schemas-md/obj/onset/","text":"Field description type properties example enum onset Definition of a wrapper for various time descriptors. object age , ageGroup , ageRange NA NA","title":"Onset"},{"location":"schemas-md/obj/pathologicalStage/","text":"Field description type properties example enum pathologicalStage Definition of an ontology term. object id , label NA NA","title":"pathologicalStage"},{"location":"schemas-md/obj/pathologicalTnmFinding/","text":"Field description type properties example enum pathologicalTnmFinding Pathological TNM findings, if applicable, preferably as subclass of NCIT:C48698 - Cancer TNM Finding Category (NCIT:C48698). RECOMMENDED. array id , label id:NCIT:C48725, label:T2a Stage Finding id:NCIT:C48709, label:N1c Stage Finding id:NCIT:C48699, label:M0 Stage Finding NA","title":"pathologicalTnmFinding"},{"location":"schemas-md/obj/pedigrees/","text":"Field description type properties example enum pedigrees NA array disease , id , members , numSubjects NA NA","title":"Pedigrees"},{"location":"schemas-md/obj/phenotypicConditions/","text":"Field description type properties example enum phenotypicConditions Phenotypic condition(s) in cohort inclusion criteria array evidence , excluded , featureType , modifiers , notes , onset , resolution , severityLevel NA NA","title":"phenotypicConditions"},{"location":"schemas-md/obj/phenotypicEffects/","text":"Field description type properties example enum phenotypicEffects NA array annotatedWith , category , clinicalRelevance , conditionId , effect , evidenceType NA NA","title":"phenotypicEffects"},{"location":"schemas-md/obj/phenotypicFeatures/","text":"Field description type properties example enum phenotypicFeatures NA array evidence , excluded , featureType , modifiers , notes , onset , resolution , severityLevel NA NA","title":"phenotypicFeatures"},{"location":"schemas-md/obj/pipelineName/","text":"Field description type properties example enum pipelineName Analysis pipeline and version if a standardized pipeline was used string NA NA NA","title":"pipelineName"},{"location":"schemas-md/obj/pipelineRef/","text":"Field description type properties example enum pipelineRef Link to Analysis pipeline resource string NA NA NA","title":"pipelineRef"},{"location":"schemas-md/obj/platform/","text":"Field description type properties example enum platform General platform technology label. It SHOULD be a subset of the platformModel and used only for query convenience, e.g. \"return everything sequenced with Illimuna\", where the specific model is not relevant string NA Illumina, Oxford Nanopore, Affymetrix NA","title":"Platform"},{"location":"schemas-md/obj/platformModel/","text":"Field description type properties example enum platformModel Definition of an ontology term. object id , label NA NA","title":"platformModel"},{"location":"schemas-md/obj/population/","text":"Field description type properties example enum population A name for the population. A population could an ethnic, geographical one or just the members of a study. string NA East Asian, ICGC Chronic Lymphocytic Leukemia-ES, Men, Children NA","title":"Population"},{"location":"schemas-md/obj/position/","text":"Field description type properties example enum position This section groups all attributes that allows to identify a variant via its position in the genome. object assemblyId , end , refseqId , start NA NA","title":"Position"},{"location":"schemas-md/obj/procedure/","text":"Field description type properties example enum procedure Class describing a clinical procedure or intervention. object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"Procedure"},{"location":"schemas-md/obj/procedureCode/","text":"Field description type properties example enum procedureCode Definition of an ontology term. object id , label NA NA","title":"procedureCode"},{"location":"schemas-md/obj/proteinHGVSIds/","text":"Field description type properties example enum proteinHGVSIds List of HGVSId descriptor(s) at protein level (for protein-altering variants). array NA NP_009225.1:p.Glu1817Ter, LRG 199p1:p.Val25Gly (preferred) NA","title":"proteinHGVSIds"},{"location":"schemas-md/obj/reference/","text":"Field description type properties example enum reference Definition of an external reference class. object id , notes , reference NA NA","title":"Reference"},{"location":"schemas-md/obj/referenceBases/","text":"Field description type properties example enum referenceBases Reference bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can be used as a standalone base of any type or within a partially known sequence. As example, a query of ANNT the Ns can take take any form of [ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. * an empty value is used in the case of insertions with the maximally trimmed, inserted sequence being indicated in AlternateBases . NOTE: Many Beacon instances could not support UIPAC codes and it is not mandatory for them to do so. In such cases the use of [ACGTN] is mandated. string NA NA NA","title":"referenceBases"},{"location":"schemas-md/obj/refseqId/","text":"Field description type properties example enum refseqId Reference sequence id for genomic reference sequence in which variant coordinates are given, e.g. 'NC_000009' for human chromosome 9. Preferably the RefSeqId, alternatively, names, synonymous or aliases e.g. 'Chr9' could be used. string NA NC_000009, Chr9, NC_012920.1 NA","title":"refseqId"},{"location":"schemas-md/obj/resolution/","text":"Field description type properties example enum resolution Definition of a wrapper for various time descriptors. object age , ageGroup , ageRange NA NA","title":"Resolution"},{"location":"schemas-md/obj/role/","text":"Field description type properties example enum role Definition of an ontology term. object id , label NA NA","title":"Role"},{"location":"schemas-md/obj/route/","text":"Field description type properties example enum route Definition of an ontology term. object id , label NA NA","title":"Route"},{"location":"schemas-md/obj/runDate/","text":"Field description type properties example enum runDate Date at which the experiment was performed. string NA NA NA","title":"runDate"},{"location":"schemas-md/obj/runId/","text":"Field description type properties example enum runId Reference to the experimental run ID ( run.id ) string NA SRR10903401 NA","title":"runId"},{"location":"schemas-md/obj/sampleOriginDetail/","text":"Field description type properties example enum sampleOriginDetail Definition of an ontology term. object id , label NA NA","title":"sampleOriginDetail"},{"location":"schemas-md/obj/sampleOriginType/","text":"Field description type properties example enum sampleOriginType Definition of an ontology term. object id , label NA NA","title":"sampleOriginType"},{"location":"schemas-md/obj/sampleProcessing/","text":"Field description type properties example enum sampleProcessing Definition of an ontology term. object id , label NA NA","title":"sampleProcessing"},{"location":"schemas-md/obj/sampleStorage/","text":"Field description type properties example enum sampleStorage Definition of an ontology term. object id , label NA NA","title":"sampleStorage"},{"location":"schemas-md/obj/severityLevel/","text":"Field description type properties example enum severityLevel Definition of an ontology term. object id , label NA NA","title":"severityLevel"},{"location":"schemas-md/obj/sex/","text":"Field description type properties example enum sex Definition of an ontology term. object id , label NA NA","title":"Sex"},{"location":"schemas-md/obj/source/","text":"Field description type properties example enum source The study string NA The Genome Aggregation Database (gnomAD), The European Genome-phenome Archive (EGA) NA","title":"Source"},{"location":"schemas-md/obj/sourceReference/","text":"Field description type properties example enum sourceReference A reference to further documentation or details. string NA gnomad.broadinstitute.org/ , ega-archive.org/ NA","title":"sourceReference"},{"location":"schemas-md/obj/stage/","text":"Field description type properties example enum stage Definition of an ontology term. object id , label NA NA","title":"Stage"},{"location":"schemas-md/obj/start/","text":"Field description type properties example enum start Precise or fuzzy start coordinate position(s) of the genomic variation (0-based, inclusive). array NA [1000] [1000,1100] NA","title":"Start"},{"location":"schemas-md/obj/toolName/","text":"Field description type properties example enum toolName Name of the tool. string NA Ensembl Variant Effect Predictor (VEP) NA","title":"toolName"},{"location":"schemas-md/obj/toolReferences/","text":"Field description type properties example enum toolReferences References to the tool object NA bio.toolsId: bio.tools/vep url: www.ensembl.org/vep NA","title":"toolReferences"},{"location":"schemas-md/obj/transcriptHGVSIds/","text":"Field description type properties example enum transcriptHGVSIds List of HGVSId descriptor(s) at transcript level. array NA NC 000023.10(NM004006.2):c.357+1G NA","title":"transcriptHGVSIds"},{"location":"schemas-md/obj/treatmentCode/","text":"Field description type properties example enum treatmentCode Definition of an ontology term. object id , label NA NA","title":"treatmentCode"},{"location":"schemas-md/obj/treatments/","text":"Field description type properties example enum treatments NA array ageAtOnset , dose , duration , frequency , route , treatmentCode , units NA NA","title":"Treatments"},{"location":"schemas-md/obj/tumorGrade/","text":"Field description type properties example enum tumorGrade Definition of an ontology term. object id , label NA NA","title":"tumorGrade"},{"location":"schemas-md/obj/tumorProgression/","text":"Field description type properties example enum tumorProgression Definition of an ontology term. object id , label NA NA","title":"tumorProgression"},{"location":"schemas-md/obj/units/","text":"Field description type properties example enum units Definition of an ontology term. object id , label NA NA","title":"Units"},{"location":"schemas-md/obj/updateDateTime/","text":"Field description type properties example enum updateDateTime The time the dataset was updated in (ISO 8601 format) string NA 2012-07-19, 2017-01-17T20:33:40Z NA","title":"updateDateTime"},{"location":"schemas-md/obj/value/","text":"Field description type properties example enum value Quantification of the exposure. number NA NA NA","title":"Value"},{"location":"schemas-md/obj/variantAlternativeIds/","text":"Field description type properties example enum variantAlternativeIds List of cross-referencing ID(s), for the variant in other databases (e.g. dbSNP, clinVarId, ClinGen, COSMIC), , preferably CURIE(s) where available, e.g. 'VCV000055583.1', 'ClinGen:CA003410'. array NA dbSNP:rs3975092470, ClinGen:CA003410, VCV000055583.1 NA","title":"variantAlternativeIds"},{"location":"schemas-md/obj/variantCaller/","text":"Field description type properties example enum variantCaller Reference to variant calling software / pipeline string NA GATK4.0 NA","title":"variantCaller"},{"location":"schemas-md/obj/variantInternalId/","text":"Field description type properties example enum variantInternalId Reference to the internal variant ID. This represents the primary key/identifier of that variant inside a given Beacon instance. Different Beacon instances may use identical id values, referring to unrelated variants. Public identifiers such as the GA4GH Variant Representation Id (VRSid) MUST be returned in the identifiers section. A Beacon instance can, of course, use the VRSid as their own internal id but still MUST represent this then in the identifiers section. string NA NA NA","title":"variantInternalId"},{"location":"schemas-md/obj/variantLevelData/","text":"Field description type properties example enum variantLevelData NA object clinicalInterpretations , phenotypicEffects NA NA","title":"variantLevelData"},{"location":"schemas-md/obj/variantType/","text":"Field description type properties example enum variantType The variantType declares the nature of the variation in relation to a reference. In a response, it is used to describe the variation. In a request, it is used to declare the type of event the Beacon client is looking for. If in queries variants can not be defined through a sequence of one or more bases ( precise variants) it can be used standalone (i.e. without alternateBases ) together with positional parameters. Examples here are e.g. queries for structural variants such as DUP (increased allelic count of material from the genomic region between start and end positions without assumption about the placement of the additional sequence) or DEL (deletion of sequence following start ). Either alternateBases or variantType is required, with the exception of range queries (single start and end parameters). string NA SNP, DEL, DUP, BND NA","title":"variantType"},{"location":"schemas-md/obj/version/","text":"Field description type properties example enum version version of the source data. string NA gnomAD v3.1.1 NA","title":"Version"},{"location":"schemas-md/obj/zygosity/","text":"Field description type properties example enum zygosity Definition of an ontology term. object id , label NA NA","title":"Zygosity"}]}